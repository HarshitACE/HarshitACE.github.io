<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hi, I&#39;m Harshit.</title>
        <link>https://harshitace.github.io/posts/</link>
        <description>Recent content in Posts on Hi, I&#39;m Harshit.</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 22 Apr 2025 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://harshitace.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Custom Ray Tracer in C&#43;&#43;</title>
            <link>https://harshitace.github.io/posts/2025/04/custom-ray-tracer-in-c-/</link>
            <pubDate>Tue, 22 Apr 2025 00:00:00 +0000</pubDate>
            
            <guid>https://harshitace.github.io/posts/2025/04/custom-ray-tracer-in-c-/</guid>
            <description>Ray Tracer - Day 1 &amp;amp; 2 Introduction: It is September of 2018, I am in my Undergrad Era, Kimi Raikkonen has stuck it on pole at Monza for Ferrari, Eminem&amp;rsquo;s Kamikaze is all the rage and breaking records and NVIDIA is ready to make Ray Tracing mainstream. Ray Tracing had existed before the RTX series of consumer grade gaming graphics card were announded but real-time ray tracing had always been seen as computationally intense workload that didn&amp;rsquo;t make sense on consumer grade hardware.</description>
            <content type="html"><![CDATA[<h1 id="ray-tracer---day-1--2">Ray Tracer - Day 1 &amp; 2</h1>
<h2 id="introduction">Introduction:</h2>
<p>It is September of 2018, I am in my Undergrad Era, Kimi Raikkonen has stuck it on pole at Monza for Ferrari, Eminem&rsquo;s
<em>Kamikaze</em> is all the rage and breaking records and NVIDIA is ready to make Ray Tracing mainstream.
Ray Tracing had existed before the RTX series of <em>consumer grade gaming graphics card</em> were announded but real-time
ray tracing had always been seen as computationally intense workload that didn&rsquo;t make sense on consumer grade hardware.
A swanky presentation with swathes of gameplay videos of every surface looking like it got dipped in oil later,
ray tracing had arrived and soon became the talk of the town.</p>
<p>As an avid <em>gamer</em> you best believe I was on the internet trying to look up every upcoming title that would give me all
the oil dipped eye candy I desired. I had accepted that ray tracing was computationally intensive - hence you take a
performance hit when you have ray tracing on and the fact without the <em>rt cores</em> in the RTX cards. Real-time ray tracing
wasn&rsquo;t even a thing that made sense to put in games. I accepted it, but, why exactly? I was taught in middle school how
light rays bounces (reflects) and bends (refracts). The equations governing that behaviour don&rsquo;t seem all that daunting
yet, it is computationally expensive that special hardware features are required to enable it? Assignments and getting
ready to build my new RTX PC made it that this thought just remained a thought and I never really explored it. That is
until now. It is 2025 I am working at my dream job and I don&rsquo;t have nearly enough time to keep up with the latest ray
traced titles. But, what I do have is some time to catch up on old things I always wanted to explore and this week I am
looking at implementing a custom ray tracer.</p>
<p>The ray tracer described here is from the very famous post <a href="https://raytracing.github.io/books/RayTracingInOneWeekend.html">Ray Tracing in One weekend</a> from Peter Shirley.</p>
<h2 id="day-1---project-setup-and-vector-implementation">Day 1 - Project Setup and Vector Implementation</h2>
<p>I have been dabbling a lot in CMake a lot lately, it is an amazing tool and when it works it <em>just works</em> but, there is
just so much customisability and granularity that comes with it that you really have to devote some serious time to get
a feeling for the best patterns and practices to work with CMake. To bake in some well established good practices I used
<a href="https://github.com/friendlyanon/cmake-init">cmake-init</a>. Please do check the project out if you too are feeling slightly
overwhelmed by CMake.</p>
<p>CMake out of the way now we can start writing our ray tracer. The first thing I wrote this day was rendering a gradient
square. We pipe the output of <code>stdout</code> to a <code>.ppm</code> file and that becomes our image. Hence, producing a gradient square
was trivial - essentially you just iterate over the rows and columns setting an RGB value for each of the squares based
on their position. Next came implementing the vector class and aliasing it to <code>color</code> and <code>point3</code>, so it could be used
when we are trying to work with colors and points, both of which as you can imagine come handy when dealing with a ray
tracer.</p>
<p>A cool insight that you get when working on projects like these are how is the code structured in the industry and what
practices are used. I was picking up on how this project was taking shape, the patterns of making libraries out of utilities
like vector etc. that can then be consumed by the main seemed like a sensible approach to promote separation of concerns
and decoupling different parts of the program.</p>
<h3 id="basic-scene-renderer-and-defining-a-ray">Basic scene renderer and defining a ray</h3>
<p>We now start by adding some <em>Physics</em> into the mix and talk about what a ray actually is. A ray, in its most basic
mathematical sense has a fixed starting point and a direction. It can be extended infinitely in its direction but the
initial point or <em>origin</em> of the ray remains fixed. Hopefully, you can see how vectors emerge as a perfect representation
of our concept of a <em>ray</em>.</p>
<p>We choose to define a ray by the following (Ray = A + tB)</p>
<h2 id="day-2---rendering-my-first-object-the-graphics-programming-hello-world">Day 2 - Rendering my first object (The graphics programming Hello World)</h2>
]]></content>
        </item>
        
        <item>
            <title>Making an Open Source Formula 1 Anayltics Platform</title>
            <link>https://harshitace.github.io/posts/2023/04/making-an-open-source-formula-1-anayltics-platform/</link>
            <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
            
            <guid>https://harshitace.github.io/posts/2023/04/making-an-open-source-formula-1-anayltics-platform/</guid>
            <description>üèéÔ∏è Background Formula 1 has always facinated me, it is the pinnacle of engineering. Man and machine working in perfect harmony to eek out few thousands of a second is nothing short of mesmerising. As a fan of the sport and also someone with a passion for the data technologies I decided to put my skills and passion in the same place and work on something, I won&amp;rsquo;t call it special yet because I am yet to find the full extent of it but hopefully that I can look back and say &amp;ldquo;I worked on that.</description>
            <content type="html"><![CDATA[<h2 id="-background">üèéÔ∏è Background</h2>
<p><em>Formula 1</em> has always facinated me, it is the pinnacle of engineering. Man and
machine working in perfect harmony to eek out few thousands of a second is
nothing short of mesmerising. As a fan of the sport and also someone with a
passion for the data technologies I decided to put my skills and passion in the
same place and work on something, I won&rsquo;t call it special yet because I am yet to
find the full extent of it but hopefully that I can look back and say &ldquo;I worked
on that.&rdquo; I mean, that is the engineering spirit at then end of the day &ndash; <em>Giving
it the best shot.</em></p>
<h2 id="-motivation">üèéÔ∏è Motivation</h2>
<p>For a few months now, my daily job (Software Dev) made me feel unsatiated.
I felt it wasn&rsquo;t going anywhere and my work wasn&rsquo;t making me happy. I needed
something to make me exicted again. That is when today when I woke up and I was
browsing <a href="https://www.reddit.com/r/F1Technical/">r/F1technical</a> and came across
<a href="https://www.reddit.com/r/F1Technical/comments/12g7wxi/code_for_f1_data_viz_website_is_now_in_a_public/?utm_source=share&amp;utm_medium=web2x&amp;context=3">u/Admired-Oregon&rsquo;s Post.</a></p>
<p>I knew what I had to do to get over this feeling of it. I had to use the skills
I had for my passion. I guess, this came so late to me because this was the first
time I was feeling like that and I am one to never quit, I will try and try until
I succeed (That engineering spirit talking again).</p>
<h2 id="-introduction">üèéÔ∏è Introduction</h2>
<h2 id="-technologies-and-resources">üèéÔ∏è Technologies and Resources</h2>
<p>This list will grow and expand and I will update it as and when I can but to
begin with this entails the technologies used are as follows:</p>
<ol>
<li>Python</li>
</ol>
<h2 id="-scope">üèéÔ∏è Scope</h2>
<p>To make a platform for all F1 fans to easily understand, assimialte and view data
from F1 and make the F1 Analytics more interactive then just an arcane art reserved
for spectacled Data Scientists and Analysts.</p>
]]></content>
        </item>
        
    </channel>
</rss>
